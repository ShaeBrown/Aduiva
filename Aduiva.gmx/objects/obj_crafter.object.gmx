<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gatherer_down</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create variables
friction=0.5 //the friction is essential to stop the motion added the player and makes a more natural looking stop
move=1       //1 is true, 0 is false. Is the player allowed to move? Used to diable movement controls when attacking or during a tutorial etc.
dir=270      //set by the movement keys, starts facing down
max_speed=3  //limits the players speed
wood=0       //number of wood
max_wood=50  //maximum carrying
global.sawui=false;
global.furnaceui=false;
global.invui=false;
global.selectx=-1;
global.selecty=-1;
global.crafitem=ds_grid_create(9,4);
global.crafamount=ds_grid_create(9,4);
select=false;
xx=noone;
yy=noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement controls
if move=0 exit;                            //cancels movement controls if move is false

var upkey, downkey, rightkey, leftkey;
                                                //these are temporary variables
upkey = keyboard_check(ord('W'));               //they are directly related to which key is pressed
downkey = keyboard_check(ord('S'));              //and only exist when they are pressed
rightkey = keyboard_check(ord('D'));            // and easy to change the controls
leftkey = keyboard_check(ord('A'));

up = (upkey &amp;&amp; !(leftkey || rightkey || downkey));      //these are the permanent variables
left = (leftkey &amp;&amp; !(upkey || rightkey || downkey));    //they are true when the temparary variables exist
right = (rightkey &amp;&amp; !(upkey || leftkey || downkey));   //allows only one movement direction at a time
down = (downkey &amp;&amp; !(upkey || leftkey || rightkey));

if up then                  //Adds motion which friction or collision stops
{                           //dir variable used for other sprite changes
motion_add(90,1)            //Change sprite to facing up
dir=90                      //Adding pixels and motion has the best result i've found
y-=5
sprite_index=spr_gatherer_up
}

if down then                 
{                           
motion_add(270,1)            
dir=270
y+=5
sprite_index=spr_gatherer_down
}

if right then                 
{                           
motion_add(0,1)            
dir=0
x+=5
sprite_index=spr_gatherer_right
}

if left then                 
{                           
motion_add(180,1)            
dir=180
x-=5
sprite_index=spr_gatherer_left
}

if speed&gt;max_speed {
speed=max_speed}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI controls

for (var i=0;i&gt;9;i++) {
    for (var j=0;j&gt;4;j++) {
         if global.crafamount[#i,j]=0 {
            global.crafitem[#i,j]=0;
         }
    }
}


if global.invui=true {
    if select=false {
    if keyboard_check_pressed(ord('W')) {
        if global.selecty=-1{
            global.selecty=0
            global.selectx=0
        }
    else {
        global.selecty-=1;
    }
        if global.selecty&lt;0 {
            global.selecty=3;
        }
    }
    if keyboard_check_pressed(ord('S')) {
        if global.selecty=-1{
            global.selecty=0
            global.selectx=0
        }
        else {
            global.selecty+=1;
        }
        if global.selecty&gt;3 {
            global.selecty=0;
        }
    }
    if keyboard_check_pressed(ord('D')) {

        if global.selecty=-1{
            global.selecty=0
            global.selectx=0
        }
        else {
            global.selectx+=1;
        }
    if global.selectx&gt;8 {
        global.selectx=0;
        }
    }
if keyboard_check_pressed(ord('A')) {
    if global.selectx=-1{
        global.selecty=0
        global.selectx=0
    }
    else {
    global.selectx-=1;
    }
    if global.selectx&lt;0 {
        global.selectx=8;
    }
    }
}

if select=true {
var n;
    if keyboard_check_pressed(ord('W')) {
        n=1;
        
        if global.selecty=0 {
            global.selecty=3;
        }
        else {
            global.selecty-=n
            }
            
        if global.crafitem[#global.selectx,global.selecty]=0 {
             
        global.crafitem[#global.selectx,global.selecty]=global.crafitem[#xx,yy]
        global.crafamount[#global.selectx,global.selecty]=global.crafamount[#xx,yy];
        global.crafitem[#xx,yy]=0
        global.crafamount[#xx,yy]=0
       
        xx=global.selectx;
        yy=global.selecty;
        }
       
            }
        
        
        if keyboard_check_pressed(ord('S')) {
        n=1;
        if global.selecty=3 {
            global.selecty=0;
        }
        else {
            global.selecty+=n
            }
            
        if global.crafitem[#global.selectx,global.selecty]=0 {
             
        global.crafitem[#global.selectx,global.selecty]=global.crafitem[#xx,yy]
        global.crafamount[#global.selectx,global.selecty]=global.crafamount[#xx,yy];
        global.crafitem[#xx,yy]=0
        global.crafamount[#xx,yy]=0
       
        xx=global.selectx;
        yy=global.selecty;
        }
        else {
        n++
        }
        }
        if keyboard_check_pressed(ord('A')) {
        n=1;
        if global.selectx=0 {
            global.selectx=8;
        }
        else {
            global.selectx-=n;
            }
            
        if global.crafitem[#global.selectx,global.selecty]=0 {
             
        global.crafitem[#global.selectx,global.selecty]=global.crafitem[#xx,yy]
        global.crafamount[#global.selectx,global.selecty]=global.crafamount[#xx,yy];
        global.crafitem[#xx,yy]=0
        global.crafamount[#xx,yy]=0
       
        xx=global.selectx;
        yy=global.selecty;
        }
        else {
        n++
        }
        }
        if keyboard_check_pressed(ord('D')) {
        n=1;
        if global.selectx=8 {
            global.selectx=0;
        }
        else {
            global.selectx+=n
            }
            
        if global.crafitem[#global.selectx,global.selecty]=0 {
             
        global.crafitem[#global.selectx,global.selecty]=global.crafitem[#xx,yy]
        global.crafamount[#global.selectx,global.selecty]=global.crafamount[#xx,yy];
        global.crafitem[#xx,yy]=0
        global.crafamount[#xx,yy]=0
       
        xx=global.selectx;
        yy=global.selecty;
        }
        }
      
    }

  }  
//Furnace
///UI controls
if global.furnaceui=true {
    if global.selection="inv" {
    if keyboard_check_pressed(ord('W')) {
        if global.selecty=-1{
            global.selecty=0
            global.selectx=0
        }
    else {
        global.selecty-=1;
    }
        if global.selecty&lt;0 {
            global.selecty=8;
        }
    }
    if keyboard_check_pressed(ord('S')) {
        if global.selecty=-1{
            global.selecty=0
            global.selectx=0
        }
        else {
            global.selecty+=1;
        }
        if global.selecty&gt;8 {
            global.selecty=0;
        }
    }
    if keyboard_check_pressed(ord('D')) {

        if global.selecty=-1{
            global.selecty=0
            global.selectx=0
        }
        else {
            global.selectx+=1;
        }
    if global.selectx&gt;3 {
        global.selectx=0;
        }
    }
if keyboard_check_pressed(ord('A')) {
    if global.selectx=-1{
        global.selecty=0
        global.selectx=0
    }
    else {
    global.selectx-=1;
    }
    if global.selectx&lt;0 {
        global.selectx=3;
    }
    }
}
    if global.selection="furnace" {
      
      if keyboard_check_pressed(ord('D')) {
            var moved;
            moved=false;
            global.selectx+=1;
    if global.selectx&gt;2 {
        global.selectx=0;
        }
        if moved=false {
        if global.furnace[#global.selectx,1]=0 {
        global.furnace[#global.selectx,0]=global.crafitem[#xx,yy]
        global.furnace[#global.selectx,1]=global.crafamount[#xx,yy];
        global.crafitem[#xx,yy]=0
        global.crafamount[#xx,yy]=0
        xx=global.selectx;
        moved=true;
        }
        }
        if moved=true {
        if global.furnace[#global.selectx,1]=0 {
        global.furnace[#global.selectx,0]=global.furnace[#xx,0]
        global.furnace[#global.selectx,1]=global.furnace[#xx,1];
        global.furnace[#xx,0]=0
        global.furnace[#xx,1]=0
        xx=global.selectx;
        }
    }
        
    }
if keyboard_check_pressed(ord('A')) {

    global.selectx-=1;
    if global.selectx&lt;0 {
        global.selectx=2;
    }
    }
}
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_saw">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw saw gui

    global.sawui=true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_furnace">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw furnace GUI
global.furnaceui=true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop
x = round(x)   //round to nearest x and y pixel
y = round(y) //so player doesn't stop between pixels
move_outside_solid(direction,speed) //moves outside object
move_contact_solid(direction,speed) //moves to contact right beside the object
speed=0     //stops player
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show inventory, drawn by controller
global.selecty=-1;
global.selectx=-1;
if global.invui=false {
    global.invui=true;
    }
else {
    global.invui=false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.furnaceui=true {
 if global.selection="inv" {
    global.selection="furnace";
    select=true;
    
    }
else if global.selection="furnace" {
    global.selection="inv"
    }

global.selectx=0;
global.selecty=0;
}
if global.invui=true {
    if select=false {
        if global.crafitem[#global.selectx,global.selecty]!=0 {
        xx=global.selectx;
        yy=global.selecty;
        select=true;
        }
    }
    else {
    select=false;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
