<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create grid, path, and variables
selected=false;    //is the player selected 
assigned=0;        //is the minion active?
army_count=60;    //how many are avialable and unactive
num=global.num;   //num is for the position on the gui
xx=0;             //variable used for x/y cordinates
yy=0;
global.count=0;   //number of minions selected
groupnum=0;       //unused (might be for a ds for groups with different destnations)
global.spawn=-1;  //for a list of minions to spawn
draw=false;       //draw the paths?
grouppath=noone;
mypath=noone;
global.cnt=0;
groupsize=0;
global.moveselected=0;
global.nearest=-1;
draw=0;
ddx=0;
ddy=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delete path
if path_exists(mypath) {

    path_delete(mypath);
    
}
if path_exists(grouppath) {

    path_delete(grouppath);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remove instance from spawn list
ds_list_delete(global.spawn, 0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn minions, create path
if !collision_point(mouse_x,mouse_y,obj_solid,0,1) {           
if global.spawn &gt;= 0 { //if there is a data structure list created
                        //that contains what minions to spawn
    if !ds_list_empty(global.spawn) //if the list is not empty
        if ds_list_find_value(global.spawn, 0) == id {  //if the first instance on the list is the instance running this code
            
            grouppath=path_add();    
           //create a path for the group (need to redo this for memory so the path is shared)
            if mp_grid_path(global.grid,grouppath,obj_commanderhut.x,obj_commanderhut.y + 20,dx,dy,1) { //if the path is possible (move this)
            draw=true;                                                                                  //draw the paths
            x = obj_commanderhut.x;                                                                     //set to spawn x
            y = obj_commanderhut.y + 20;                                                                //set to spawn y
            --global.count; 
                                                                                        //decrease the count of minions selected
            mp_grid_path(global.grid,grouppath,x,y,dx,dy,1);                            //compute the path
            mypath=path_add(); //Local short path connected to the groups path
            
            pos1=1; //This holds the next point on the global path to move to
            x1=path_get_point_x(grouppath,pos1); //This gets the x/y coordinates of the next point
            y1=path_get_point_y(grouppath,pos1);

            mp_grid_path(global.grid,mypath,x,y,x1,y1,true);    //Computes the short path
            pos2=1;
            x2=path_get_point_x(mypath,pos2);        //This gets the x/y coords of the next point on the short path
            y2=path_get_point_y(mypath,pos2);
            path_set_kind(mypath,1);                //Sets the path to allow diagonals
            path_set_precision(mypath,8);           //Sets the path to curve
    
          
            alarm[2] = 2; //deletes the instance from the spawn list
            assigned=1;   //minion is now active
            }
            
        }else
            alarm[1] = 10;  //repeat for each minion on the spawn list
    if ds_list_empty(global.spawn) {    //if the list is empty
        ds_list_destroy(global.spawn);  //destroy the list to save memory
        global.spawn = -1;              //set list variable to a -1 to indicate that there is no list
    }
}
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gui follow screen and pathfinding

    
if assigned=0 {                                 //not active minions
    xx=view_xview[2]+25+((num mod 20)*25);      //display as columns and rows in gui
    yy=view_yview[2]+25+((num div 20)*25);
    x=xx;
    y=yy;   }
    
if assigned=1 {                                 //is active
    if path_exists(grouppath) {          //if a destination exists
    

//First check to see where on the global path we are and move the point foward if necessary
        if point_distance(x,y,x1,y1)&lt;12 {
            pos1+=1;
            if pos1=path_get_number(grouppath) {
                path_delete(grouppath);
                }
            
            else {
             //The enemy hasn't reached the end so we calculate the x/y coords
             //of the next point on the group path
                    x1=path_get_point_x(grouppath,pos1);
                    y1=path_get_point_y(grouppath,pos1);
            }
        }

            //Now we will deal with the short path
            if point_distance(x,y,x2,y2)&lt;12 {
                //If you are close, advance one point on the path
                pos2+=1;
                if pos2=path_get_number(mypath) {
                    //If we are at the path end, create a new short
                    //path to the next point on the group path
                    mp_grid_path(global.grid,mypath,x,y,x1,y1,true);
                    pos2=1;
                    x2=path_get_point_x(mypath,pos2); //This gets the x/y coords of the next point on the short path
                    y2=path_get_point_y(mypath,pos2);
                    path_set_kind(mypath,1); //Sets the path to allow diagonals
                    path_set_precision(mypath,8); //Sets the path to curve
                }
            }

//Now use mp_potential_step to move along the path from point to point
        if path_exists(mypath) {
            var xxx, yyy;
            xxx = x + lengthdir_x(5, direction);
            yyy = y + lengthdir_y(5, direction);
            if !collision_circle(xxx,yyy,5,obj_armyleader,false,true) {
                mp_potential_step(x2,y2,1,false);
            }
            
            else {
                path_position=path_positionprevious;
            }
        }


    

if collision_circle(x,y,200,obj_enemy,1,0) {
    var xx,yy;
    xx=path_get_x(grouppath,1);
    yy=path_get_y(grouppath,1);
    with instance_nearest(xx,yy,obj_waypoint) {
    instance_destroy();
    }
    
    enemy=instance_nearest(x,y,obj_enemy);
    ddx=enemy.x;
    ddy=enemy.y;
    path_delete(grouppath);
    grouppath=path_add();
    mp_grid_path(global.grid,grouppath,x,y,ddx,ddy,true);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slide along solids
var a,xoff,yoff;
a=point_direction(x,y,other.x,other.y)
xoff=lengthdir_x(0.5,a);
yoff=lengthdir_y(0.5,a);
while (place_meeting(x,y,other.id))
{
x-=xoff;
y-=yoff;
//other.x+=xoff;
//other.y+=yoff;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select the unit

if((x &gt; obj_mouse.clickx &amp;&amp; x &lt; mouse_x &amp;&amp; y &lt; obj_mouse.clicky &amp;&amp; y &gt; mouse_y) || (x &gt; obj_mouse.clickx &amp;&amp; x &lt; mouse_x &amp;&amp; y &gt; obj_mouse.clicky &amp;&amp; y &lt; mouse_y) || (x &lt; obj_mouse.clickx &amp;&amp; x &gt; mouse_x &amp;&amp; y &lt; obj_mouse.clicky &amp;&amp; y &gt; mouse_y) || (x &lt; obj_mouse.clickx &amp;&amp; x &gt; mouse_x &amp;&amp; y &gt; obj_mouse.clicky &amp;&amp; y &lt; mouse_y)) {    //is object inside selection rectangle?
    global.cnt++;
     if (assigned=0) {
        if global.commui=true {
            selected = true;    
            global.count+=1;  //select minions inside selection rectangle
            global.marker=true;   //draw the marker
          //if not active
         //add the count                                                         
    
        }
    }
    else {
        selected = true;
        global.marker=true;
    }
}
    
else {
    selected=false;       //do not select if not inside the rectangle                                                                   
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Right click to direct the selected unit
if !collision_point(mouse_x,mouse_y,obj_solid,1,1) {           
if obj_mouse.inside_view=2 {                //if you click inside the commander's view
    if global.spawn=-1 {                    //if there is no data structure list
        global.spawn= ds_list_create();     //create an empty one
    }
    if (selected==true) { 
    global.marker=true;
    dx = mouse_x;                      //set destination cordinates
    dy = mouse_y;                    //if the minion is selected
        if (assigned==0) { 
            num=noone;                          //deassign its number in the gui
             army_count-=global.count           //decrease the number of minions available to assign
             ds_list_add(global.spawn,id);      //make a list of minions selected to spawn
    }
    else {   
         var n, num, inst;
         
                    num = instance_number(obj_armyleader);
                    
                    for (n=1; n&lt;=num; n++) {
                    inst = instance_nth_nearest(mouse_x,mouse_y,obj_armyleader,n);
                        with (inst) {
                            if (selected==1 &amp;&amp; assigned==1) {
                             break;
                            }
                        }
                    
                    }
                    
                    
                                                            //if the minion is already active
            var xx,yy;
            if path_exists(grouppath){
                global.moveselected++;
                xx=path_get_x(grouppath,1);
                yy=path_get_y(grouppath,1);
                if global.moveselected&gt;=groupsize {
                    with instance_nearest(xx,yy,obj_waypoint) {
                        instance_destroy();
                    }
                }
            }
            else {
                    grouppath=path_add();
                    mypath=path_add();
            }   
            mp_grid_path(global.grid,grouppath,inst.x,inst.y,dx,dy,1);  //make a new path from the closest cordinates on current path to the new destination
            
                    pos1=1; //This holds the next point on the global path to move to...
                    x1=path_get_point_x(grouppath,pos1); //This gets the x/y coords of the next point...
                    y1=path_get_point_y(grouppath,pos1);
                    mp_grid_path(global.grid,mypath,x,y,x1,y1,true); //Create the short path...
                    pos2=1;
                    x2=path_get_point_x(mypath,pos2); //This gets the x/y coords of the next point on the short path...
                    y2=path_get_point_y(mypath,pos2);
                    
                    
                 }
   selected=false;
        
                
    groupsize=global.cnt;
    alarm[1]=1;
         }
    
    }
    
}
else if collision_point(mouse_x,mouse_y,obj_solid,1,1) {
global.marker=false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset selected minion count
global.count=0;
global.cnt=0;
global.moveselected=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw gui, selection rectangle, paths

    xx=view_xview[2]+25+((num mod 20)*25); //position to draw on gui
    yy=view_yview[2]+25+((num div 20)*25);


if (selected==true) { //if minion is selected
    if view_current==2 {    //only on commmanders view
        if assigned=0 {     //draw a circle around selected minions
            draw_ellipse(xx-5,yy-5,xx+5,yy+5,1) //if x,y it wouldnt draw as fast
        }
        if assigned=1 {
            draw_ellipse(x-5,y-5,x+5,y+5,1)
        }
    }
}

if assigned=1 {
    draw_sprite(spr_army_leader,0,x,y)  
  
}
else {
    if (view_current==2) {     
        if global.commui=true {         //if not active draw
        draw_sprite(spr_army_leader,0,xx,yy)
    }
}
}
if path_exists(grouppath)  {
    draw_set_colour(c_red);             //draw the minion's path
    draw_path(grouppath,x,y,true);
}
if path_exists(mypath) {
    draw_set_colour(c_black);
    draw_path(mypath,x,y,true);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
